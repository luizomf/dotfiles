#!/bin/sh
# vim: set filetype=sh :

# Reset
RESET='\033[0m'

# Cores normais
BLACK='\033[0;30m'
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[0;37m'

# Cores em negrito (bold ou bright)
BRIGHT_BLACK='\033[1;30m'
BRIGHT_RED='\033[1;31m'
BRIGHT_GREEN='\033[1;32m'
BRIGHT_YELLOW='\033[1;33m'
BRIGHT_BLUE='\033[1;34m'
BRIGHT_MAGENTA='\033[1;35m'
BRIGHT_CYAN='\033[1;36m'
BRIGHT_WHITE='\033[1;37m'

# FunÃ§Ãµes para printar mensagens coloridas de forma legÃ­vel
log() {
  printf "${CYAN}%s${RESET}\n" "$1"
}

loginfo() {
  log "ðŸ”µ $1"
}

logsuccess() {
  printf "ðŸŸ¢ ${GREEN}%s${RESET}\n" "$1"
}

logerror() {
  printf "ðŸ”´ ${RED}%s${RESET}\n" "$1"
}


function dtouch() {
  mkdir -p "$(dirname "$1")"
  touch "$1"
}

function componentTs() {
  # code -r src/components/"$1"/index.tsx src/components/"$1"/"$1".tsx src/components/"$1"/"$1".module.css
  mkdir -p src/components/"$1"
  zed -a src/components/"$1"/index.tsx
  zed -a src/components/"$1"/"$1".spec.tsx
  zed -a src/components/"$1"/"$1".test.tsx
  zed -a src/components/"$1"/"$1".stories.tsx
  zed -a src/components/"$1"/"$1".module.css
}

function componentJs() {
  code -r src/components/"$1"/styles.js src/components/"$1"/index.jsx src/components/"$1"/stories.jsx src/components/"$1"/"$1".spec.jsx
}

function aula_c() {
  [ -z "$1" ] && echo "Empty Param, send a class name" && return
  ffmpeg -i \
    "/Users/luizotavio/Desktop/$1.mp4" -vf "scale=1920:1080" -sws_flags lanczos \
    -c:v libx264 -crf 23 -preset slow -c:a aac -b:a 160k \
    "/Users/luizotavio/Desktop/$1-c.mp4"
}

function memoryUsage() {
  ps -A -o rss,comm | grep -E "$1" | grep -v grep | awk '{ sum += $1 } END { printf "%.2f MB\n", sum / 1024 }'
}

function deletePythonCache() {
    echo "Limpando diretÃ³rios de cache e build..."

    deactivate
    find . -type d \( -name "__pycache__" -o -name ".pytest_cache" -o -name ".tox" -o -name "*.egg-info" -o -name "build" -o -name "dist" \) -exec rm -r {} \;
    find . -type f \( -name "*.pyc" -o -name "*.pyo" \) -delete

    echo "Limpeza concluÃ­da com sucesso!"
}



function iterm() {
    cwd=$(pwd)
    open -a iterm $cwd
}

restart_terminal() {
    . ~/.zshrc
    tmux respawn-window -k
}

function show_fg_colors() {
  echo
  echo "ðŸŽ¨ Foreground colors (0â€“255):"
  for i in {0..255}; do
    local label=""
    case $i in
      0) label="black" ;;
      1) label="red" ;;
      2) label="green" ;;
      3) label="yellow" ;;
      4) label="blue" ;;
      5) label="magenta" ;;
      6) label="cyan" ;;
      7) label="white" ;;
      8) label="brightblack (gray)" ;;
      9) label="brightred" ;;
      10) label="brightgreen" ;;
      11) label="brightyellow" ;;
      12) label="brightblue" ;;
      13) label="brightmagenta" ;;
      14) label="brightcyan" ;;
      15) label="brightwhite" ;;
    esac
    print -P "%F{$i}â–ˆ  %3d  %-22s%f" $i "$label"
  done
}


function show_bg_colors() {
  echo
  echo "ðŸ§± Background colors (0â€“255):"
  for i in {0..255}; do
    local label=""
    case $i in
      0) label="black" ;;
      1) label="red" ;;
      2) label="green" ;;
      3) label="yellow" ;;
      4) label="blue" ;;
      5) label="magenta" ;;
      6) label="cyan" ;;
      7) label="white" ;;
      8) label="brightblack (gray)" ;;
      9) label="brightred" ;;
      10) label="brightgreen" ;;
      11) label="brightyellow" ;;
      12) label="brightblue" ;;
      13) label="brightmagenta" ;;
      14) label="brightcyan" ;;
      15) label="brightwhite" ;;
    esac
    print -P "%K{$i}  %-3d %s  %k" $i "$label"
  done
}

function gitconfig() {
  set -e

  log "Your name:"
  read NAME

  log "Your e-mail:"
  read EMAIL

  log

  # Initialize git
  log "Command: git init"
  git init

  # Configurar o nome do usuÃ¡rio"
  log "Command: git config user.name \"${NAME}\""
  git config user.name "${NAME}"

  # Configurar o e-mail do usuÃ¡rio"
  log "Command: git config user.email \"${EMAIL}\""
  git config user.email "${EMAIL}"

  # Muda o nome do branch para main"
  log "Command: git branch -m main"
  git branch -m main

  # Garantir que o Git converta CRLF para LF apenas ao commitar (Ã³timo para projetos multiplataforma)"
  log "Command: git config core.autocrlf input"
  git config core.autocrlf input

  # ForÃ§ar o Git a usar LF como fim de linha sempre"
  log "Command: git config core.eol lf"
  git config core.eol lf

  # Verificar as configuraÃ§Ãµes aplicadas"
  log "Command: git config --list --local"
  # git config --list --local
  #
  # Adicionando o repositÃ³rio"
  # log "git add ."
  # log "git commit -m \"initial\""
  # log "git remote add origin LINK-REPO"
  # log "git push origin main -u  "
}

function tmux_respawn_all() {
  echo "Iniciando a limpeza do Tmux Resurrect"
  rm -Rf ~/.local/share/tmux/resurrect/*.*
  rm -Rf ~/.local/share/tmux/resurrect/last

  echo "Salvando as sessÃµes..."
  /Users/luizotavio/.tmux/plugins/tmux-resurrect/scripts/save.sh

  echo "Tmux resurrect limpo com sucesso!"
  sleep 2

  for pane in $(tmux list-panes -a -F '#D'); do 
    tmux respawn-pane -k -t $pane; 
  done

  sleep 2

  echo "Salvando as sessÃµes novamente..."
  /Users/luizotavio/.tmux/plugins/tmux-resurrect/scripts/save.sh
}

function cleanNeovimLogs() {
  echo "ðŸ§¼ Iniciando limpeza de logs e cache do Neovim..."

  [[ -d ~/.local/state/nvim ]] && rm ~/.local/state/nvim/*.log
  [[ -d ~/.cache/nvim ]] && {
      rm ~/.cache/nvim/*.log
      rm -r ~/.cache/nvim/shada
      rm -r ~/.cache/nvim/sessions
  }
  echo "âœ… Neovim limpo com sucesso!"
}

# Wrapper para resolver um problema chato de SSH:
# Minha confusÃ£o se estou local ou no server
sshc() {
  if [ -z "$TMUX" ]; then
    # NÃ£o estamos no tmux
    command ssh "$@"
    return
  fi

  # Pega o estilo atual do tmux
  original_ss=$(tmux show-options -gqv status-style)
  original_wsf=$(tmux show-options -gqv window-status-format)
  original_wscf=$(tmux show-options -gqv window-status-current-format)
  original_term=$TERM

  # LÃ³gica de limpeza
  _cleanup() {
    echo "SessÃ£o SSH encerrada. Restaurando o estilo do tmux..."
    tmux set-option -g status-style "$original_ss"
    tmux set-option -g window-status-format "$original_wsf"
    tmux set-option -g window-status-current-format "$original_wscf"
    TERM=$original_term
  }

  trap _cleanup EXIT

  TERM=$SSH_TERM
  tmux set -g status-style "fg=black,bg=red"
  tmux set -g window-status-format "#[fg=black,bg=red] #I:#W "
  tmux set -g window-status-current-format "#[fg=white,bg=black] #I:#W "

  command ssh -q "$@"
}

tmuxns() {
  session_name="$1"
  shift 

  tmux new-session -d -s $session_name -c "$(pwd)"

  for arg in "$@"; do
    tmux new-window -t $session_name -n $arg -c "$(pwd)"
  done
}

function tmux_run_all_panes() {
  for window in $(tmux list-panes -a -F "#{session_id}:#{window_id}"); do 
    tmux send-keys -t $window $@ C-m
  done
}

function ollama_stop_all() {
  ollama ps | awk 'NR>1 {print $1}' | xargs -L 1 ollama stop
}
